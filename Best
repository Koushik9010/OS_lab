#include <stdio.h>

// Global variables
int i, total_memory, total_process, total_used_memory = 0, total_wastage = 0;

// Function to allocate memory using the best fit algorithm
void allocateMemory() {
  int block_size[total_process]; // Array to store block sizes for each process
  int memory;

  // Loop through each process
  for (i = 0; i < total_process; i++) {
    printf("Enter the required memory size for process P%d: ", i);
    scanf("%d", &memory);

    int best_fit_index = -1;
    int best_fit_size = total_memory + 1;

    // Find the smallest block that fits the current process
    for (int j = 0; j < total_process; j++) {
      if (block_size[j] >= memory && block_size[j] < best_fit_size) {
        best_fit_index = j;
        best_fit_size = block_size[j];
      }
    }

    // Check if a suitable block is found
    if (best_fit_index != -1) {
      printf("Allocating memory for process P%d using block %d.\n", i, best_fit_index);
      block_size[best_fit_index] -= memory;
      total_used_memory += memory;
    } else {
      printf("Not enough memory for process P%d. Try again.\n", i);
      i--; // Decrement i to repeat the current process
    }
  }
}

// Main function
int main() {
  // Input: total memory size
  printf("Enter the total memory size: ");
  scanf("%d", &total_memory);

  // Input: total number of processes
  printf("Enter the total number of processes: ");
  scanf("%d", &total_process);

  // Initialize block sizes for each process
  int block_size[total_process];
  for (int j = 0; j < total_process; j++) {
    block_size[j] = total_memory / total_process;
  }

  // Allocate memory using the best fit algorithm
  allocateMemory();

  // Calculate total wastage
  total_wastage = total_memory - total_used_memory;

  // Print results
  printf("Memory allocation successful.\n");
  printf("Total memory used: %d\n", total_used_memory);
  printf("Total wastage: %d\n", total_wastage);

  return 0;
}
